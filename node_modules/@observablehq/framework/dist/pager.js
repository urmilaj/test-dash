const linkCache = /* @__PURE__ */ new WeakMap();
function normalizePath(path) {
  return path.replace(/[?#].*$/, "");
}
function findLink(path, options = { pages: [] }) {
  const { pages, title } = options;
  let links = linkCache.get(pages);
  if (!links) {
    links = /* @__PURE__ */ new Map();
    let prev;
    for (const page of walk(pages, title)) {
      const path2 = normalizePath(page.path);
      if (links.has(path2)) {
        console.warn(`ignoring duplicate page: ${page.path}`);
      } else {
        if (prev) {
          links.set(path2, { prev, next: void 0 });
          links.get(normalizePath(prev.path)).next = page;
        } else {
          links.set(path2, { prev: void 0, next: void 0 });
        }
        prev = page;
      }
    }
    if (links.size === 1)
      links.clear();
    linkCache.set(pages, links);
  }
  return links.get(path);
}
function* walk(pages, title = "Home", visited = /* @__PURE__ */ new Set()) {
  if (!visited.has("/index"))
    yield (visited.add("/index"), { name: title, path: "/index" });
  for (const page of pages) {
    if ("pages" in page)
      yield* walk(page.pages, title, visited);
    else if (!visited.has(page.path))
      yield (visited.add(page.path), page);
  }
}
export {
  findLink,
  normalizePath
};
