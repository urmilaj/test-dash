import mime from "mime";
import { mergeToc } from "./config.js";
import { getClientPath } from "./files.js";
import { html, parseHtml, rewriteHtml } from "./html.js";
import { transpileJavaScript } from "./javascript/transpile.js";
import { findLink, normalizePath } from "./pager.js";
import { isAssetPath, relativePath, resolvePath, resolveRelativePath } from "./path.js";
import { getResolvers } from "./resolvers.js";
import { rollupClient } from "./rollup.js";
async function renderPage(page, options) {
  const { data } = page;
  const { base, path, title, preview } = options;
  const { loaders, resolvers = await getResolvers(page, options) } = options;
  const sidebar = data?.sidebar !== void 0 ? Boolean(data.sidebar) : options.sidebar;
  const toc = mergeToc(data?.toc, options.toc);
  const draft = Boolean(data?.draft);
  const { files, resolveFile, resolveImport } = resolvers;
  return String(html`<!DOCTYPE html>
<meta charset="utf-8">${path === "/404" ? html`\n<base href="${preview ? "/" : base}">` : ""}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
${page.title || title ? html`<title>${[page.title, page.title === title ? null : title].filter((title2) => !!title2).join(" | ")}</title>\n` : ""}${renderHead(page.head, resolvers, options)}${path === "/404" ? html.unsafe(`
<script type="module">

if (location.pathname.endsWith("/")) {
  const alt = location.pathname.slice(0, -1);
  fetch(alt, {method: "HEAD"}).then((response) => response.ok && location.replace(alt + location.search + location.hash));
}

</script>`) : ""}
<script type="module">${html.unsafe(`

import ${preview || page.code.length ? `{${preview ? "open, " : ""}define} from ` : ""}${JSON.stringify(
    resolveImport("observablehq:client")
  )};${files.size || data?.sql ? `
import {registerFile${data?.sql ? ", FileAttachment" : ""}} from ${JSON.stringify(
    resolveImport("observablehq:stdlib")
  )};` : ""}${data?.sql ? `
import {registerTable} from ${JSON.stringify(resolveImport("npm:@observablehq/duckdb"))};` : ""}${files.size ? `
${registerFiles(
    files,
    resolveFile,
    preview ? (name) => loaders.getSourceLastModified(resolvePath(path, name)) : (name) => loaders.getOutputLastModified(resolvePath(path, name))
  )}` : ""}${data?.sql ? `
${registerTables(data.sql, options)}` : ""}
${preview ? `
open({hash: ${JSON.stringify(resolvers.hash)}, eval: (body) => eval(body)});
` : ""}${page.code.map(({ node, id }) => `
${transpileJavaScript(node, { id, path, resolveImport })}`).join("")}`)}
</script>${sidebar ? html`\n${await renderSidebar(options)}` : ""}${toc.show ? html`\n${renderToc(findHeaders(page), toc.label)}` : ""}
<div id="observablehq-center">${renderHeader(page.header, resolvers)}
<main id="observablehq-main" class="observablehq${draft ? " observablehq--draft" : ""}">
${html.unsafe(rewriteHtml(page.body, resolvers))}</main>${renderFooter(page.footer, resolvers, options)}
</div>
`);
}
function registerTables(sql, options) {
  return Object.entries(sql).map(([name, source]) => registerTable(name, source, options)).join("\n");
}
function registerTable(name, source, { path }) {
  return `registerTable(${JSON.stringify(name)}, ${isAssetPath(source) ? `FileAttachment(${JSON.stringify(resolveRelativePath(path, source))})` : JSON.stringify(source)});`;
}
function registerFiles(files, resolve, getLastModified) {
  return Array.from(files).sort().map((f) => registerFile(f, resolve, getLastModified)).join("");
}
function registerFile(name, resolve, getLastModified) {
  return `
registerFile(${JSON.stringify(name)}, ${JSON.stringify({
    name,
    mimeType: mime.getType(name) ?? void 0,
    path: resolve(name),
    lastModified: getLastModified(name)
  })});`;
}
async function renderSidebar(options) {
  const { title = "Home", pages, root, path, search, md } = options;
  const { normalizeLink } = md;
  return html`<input id="observablehq-sidebar-toggle" type="checkbox" title="Toggle sidebar">
<label id="observablehq-sidebar-backdrop" for="observablehq-sidebar-toggle"></label>
<nav id="observablehq-sidebar">
  <ol>
    <label id="observablehq-sidebar-close" for="observablehq-sidebar-toggle"></label>
    <li class="observablehq-link${normalizePath(path) === "/index" ? " observablehq-link-active" : ""}"><a href="${md.normalizeLink(relativePath(path, "/"))}">${title}</a></li>
  </ol>${search ? html`\n  <div id="observablehq-search"><input type="search" placeholder="Search"></div>
  <div id="observablehq-search-results"></div>
  <script>{${html.unsafe(
    (await rollupClient(getClientPath("search-init.js"), root, path, { minify: true })).trim()
  )}}</script>` : ""}
  <ol>${pages.map(
    (p, i) => "pages" in p ? html`${i > 0 && "path" in pages[i - 1] ? html`</ol>` : ""}
    <details${p.pages.some((p2) => normalizePath(p2.path) === path) ? html` open class="observablehq-section-active"` : p.open ? " open" : ""}>
      <summary>${p.name}</summary>
      <ol>${p.pages.map((p2) => renderListItem(p2, path, normalizeLink))}
      </ol>
    </details>` : "path" in p ? html`${i > 0 && "pages" in pages[i - 1] ? html`\n  </ol>\n  <ol>` : ""}${renderListItem(
      p,
      path,
      normalizeLink
    )}` : ""
  )}
  </ol>
</nav>
<script>{${html.unsafe(
    (await rollupClient(getClientPath("sidebar-init.js"), root, path, { minify: true })).trim()
  )}}</script>`;
}
const tocSelector = "h1:not(:first-of-type), h2:first-child, :not(h1) + h2";
function findHeaders(page) {
  return Array.from(parseHtml(page.body).document.querySelectorAll(tocSelector)).map((node) => ({ label: node.textContent, href: node.firstElementChild?.getAttribute("href") })).filter((d) => !!d.label && !!d.href);
}
function renderToc(headers, label) {
  return html`<aside id="observablehq-toc" data-selector="${tocSelector}">
<nav>${headers.length > 0 ? html`
<div>${label}</div>
<ol>${headers.map(
    ({ label: label2, href }) => html`\n<li class="observablehq-secondary-link"><a href="${href}">${label2}</a></li>`
  )}
</ol>` : ""}
</nav>
</aside>`;
}
function renderListItem(page, path, normalizeLink) {
  return html`\n    <li class="observablehq-link${normalizePath(page.path) === path ? " observablehq-link-active" : ""}"><a href="${normalizeLink(relativePath(path, page.path))}">${page.name}</a></li>`;
}
function renderHead(head, resolvers, { scripts, root }) {
  const { stylesheets, staticImports, resolveImport, resolveStylesheet } = resolvers;
  const resolveScript = (src) => /^\w+:/.test(src) ? src : resolveImport(relativePath(root, src));
  return html`<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>${Array.from(new Set(Array.from(stylesheets, (i) => resolveStylesheet(i))), renderStylesheetPreload)}${Array.from(new Set(Array.from(stylesheets, (i) => resolveStylesheet(i))), renderStylesheet)}${Array.from(new Set(Array.from(staticImports, (i) => resolveImport(i))), renderModulePreload)}${head ? html`\n${html.unsafe(rewriteHtml(head, resolvers))}` : null}${Array.from(scripts, (s) => renderScript(s, resolveScript))}`;
}
function renderScript(script, resolve) {
  return html`\n<script${script.type ? html` type="${script.type}"` : null}${script.async ? html` async` : null} src="${resolve(script.src)}"></script>`;
}
function renderStylesheet(href) {
  return html`\n<link rel="stylesheet" type="text/css" href="${href}"${/^\w+:/.test(href) ? " crossorigin" : ""}>`;
}
function renderStylesheetPreload(href) {
  return html`\n<link rel="preload" as="style" href="${href}"${/^\w+:/.test(href) ? " crossorigin" : ""}>`;
}
function renderModulePreload(href) {
  return html`\n<link rel="modulepreload" href="${href}">`;
}
function renderHeader(header, resolvers) {
  return header ? html`\n<header id="observablehq-header">\n${html.unsafe(rewriteHtml(header, resolvers))}\n</header>` : null;
}
function renderFooter(footer, resolvers, options) {
  const { path, md } = options;
  const link = options.pager ? findLink(path, options) : null;
  return link || footer ? html`\n<footer id="observablehq-footer">${link ? renderPager(path, link, md.normalizeLink) : ""}${footer ? html`\n<div>${html.unsafe(rewriteHtml(footer, resolvers))}</div>` : ""}
</footer>` : null;
}
function renderPager(path, { prev, next }, normalizeLink) {
  return html`\n<nav>${prev ? renderRel(path, prev, "prev", normalizeLink) : ""}${next ? renderRel(path, next, "next", normalizeLink) : ""}</nav>`;
}
function renderRel(path, page, rel, normalizeLink) {
  return html`<a rel="${rel}" href="${normalizeLink(relativePath(path, page.path))}"><span>${page.name}</span></a>`;
}
export {
  renderPage
};
